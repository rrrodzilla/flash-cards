name: Release and Deploy

on:
  release:
    types: [published]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test:run

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Build production bundle
        run: pnpm build

      - name: Create deployment archive
        run: |
          cd dist
          tar -czf ../flashcards-${{ github.event.release.tag_name }}.tar.gz .
          cd ..

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./flashcards-${{ github.event.release.tag_name }}.tar.gz
          asset_name: flashcards-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Trigger deployment webhook
        env:
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          PAYLOAD='{
            "action": "published",
            "release": {
              "tag_name": "${{ github.event.release.tag_name }}",
              "name": "${{ github.event.release.name }}",
              "html_url": "${{ github.event.release.html_url }}"
            },
            "repository": {
              "full_name": "${{ github.repository }}",
              "clone_url": "${{ github.event.repository.clone_url }}"
            }
          }'
          SIGNATURE="sha256=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | sed 's/^.* //')"
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-GitHub-Event: release" \
            -H "X-Hub-Signature-256: $SIGNATURE" \
            -d "$PAYLOAD"
